//test

#include"扫雷.h"
void menu()
{
	printf("1.play  0.exit");
}
void game()
{
	//雷存储的位置
	//布置雷的信息
	char mine[ROWS][COLS] = { 0 };
	//排查雷的信息
	char show[ROWS][COLS] = { 0 };
	//初始化
	Initboard(mine, ROWS, COLS,'0');
	Initboard(show, ROWS, COLS,'*');
	//Display(mine, ROW, COL);
	Display(show, ROW, COL);
	Setmine(mine, ROW, COL);
	//Display(mine, ROW, COL);
	Findmine(mine, show, ROW, COL);
	printf("扫雷\n");
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do 
	{
		menu();
		printf("请选择\n");
		scanf("%d", &input);
		switch(input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出\n");
			break;
		default:
			printf("错误\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
//game.c
#include"扫雷.h"

void Initboard(char borad[ROWS][COLS], int rows, int cols,char set)
{
	int i = 0;
	int j = 0;
	for (i = 0;i < rows;i++)
	{
		for (j = 0;j < cols;j++)
		{
			borad[i][j] = set;
		}
	}
}
void Display(char borad[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0;i <= col;i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1;i <= row;i++)
	{
		printf("%d ", i);
		for (j = 1;j <= col;j++)
		{
			printf("%c ",borad[i][j]);
		}
		printf("\n");
	}
}
void Setmine(char borad[ROWS][COLS], int row, int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand() % row + 1;
		int y = rand() % col + 1;
		if (borad[x][y] == '0')
		{
			borad[x][y] = '1';
			count--;
		}
	}
}
int get_count_mine(char mine[ROWS][COLS],int x,int y)
{
	return 
		mine[x - 1][y] +
		mine[x - 1][y - 1] + 
		mine[x][y - 1] + 
		mine[x + 1][y - 1] +
		mine[x + 1][y] + 
		mine[x + 1][y + 1] + 
		mine[x][y + 1] + 
		mine[x - 1][y + 1] - 8 * '0';
}
void Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while (win<row*col-EASY_COUNT)
	{
		printf("请输入坐标\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (mine[x][y] == '1')
			{
				printf("你输了\n");
			    Display(mine, row, col);
			    break;
		     }
		    else
		    {
			    int count = get_count_mine(mine, x, y);
			    show[x][y] = count + '0';
			    Display(show, row, col);
				win++;

		    }
	}
	else
	{
		printf("坐标非法\n");
	}
	}
	if (win == row * col - EASY_COUNT)
	{
		printf("赢了\n");
	}
}
//game.h
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#define EASY_COUNT 10
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
void Initboard(char borad[ROWS][COLS],int rows, int cols,char set);
void Display(char borad[ROWS][COLS],int row,int col);
void Setmine(char borad[ROWS][COLS], int row, int col);
void Findmine(char mine[ROWS][COLS],char show[ROWS][COLS],int row,int col);

