#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>

//int main()
//{
//	char a1[] = "abcdef";
//	char a2[] = "bcde";
//	char* ret = strstr(a1, a2);
//	printf("%s\n", ret);
//	return 0;
//}
#include<assert.h>
//char* my_strstr(const char *a1, const char *a2)
//{
//	assert(a1 && a2);
//	char* s1 = (char*)a1;
//	char* s2 = (char*)a2;
//	char* cur = (char*)a1;
//	if (*a2 == '\0')
//	{
//		return (char*)a1;
//	}
//	while (*cur)
//	{
//		s1 = cur;
//		s2 = (char*)a2;
//		while ((*s1!='\0')&&(*s2!='\0')&&(*s1==*s2))
//		{
//			s1++;
//			s2++;
//		}
//		if (*s2 == '\0')
//		{
//			return cur;
//		}
//		if (*s1 == '\0')
//		{
//			return NULL;
//		}
//		cur++;
//	}
//	return NULL;
//
//}
//int main()
//{
//	const char *a1 = "abcdef";
//	const char *a2 = "bcd";
//	char* ret = my_strstr(a1, a2);
//	printf("%s\n", ret); 
//	return 0;
//}
//int main()
//{
//	char arr[] = "zwe@sdawd.tt";
//	const char* p = "@.";
//
//
//
//	//char* ret = NULL;
//	//for (ret = strtok(arr, p);ret != NULL;ret = strtok(NULL, p))
//	//{
//	//	printf("%s\n", ret);
//	//}
//
//
//	char* ret = strtok(arr, p);
//	printf("%s\n", ret);
//	ret = strtok(NULL, p);
//	printf("%s\n", ret);
//	ret = strtok(NULL, p);
//	printf("%s\n", ret);
//
//	return 0;
//}
//struct stu
//{
//	char name[20];
//	int age;
//};
//void*my_memcpy(void*dest,const void*src,size_t num)
//{
//	assert(dest && src);
//	void* ret = dest;
//	while (num--)
//	{
//		*(char*)dest = *(char*)src;
//	    dest=(char*)dest+1;
//		src = (char*)src + 1;
//	}
//	return ret;
//}
////C语言标准
////memcpy 只要处理 不重叠的内存拷贝就可以
////memmove 处理重叠内存拷贝
//void*my_memmove(void*dest,const void*src,size_t)
//{
//
//}
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[5] = { 0 };
//	stu arr3[] = { {"zs",20},{"ls",30} };
//	stu arr4[] = { 0 };
//	my_memcpy(arr4, arr3, sizeof(arr3));
//	//memcpy;
//	// memmove
//	//strcpy(arr2, arr1);
//	return 0;
//}
//void* my_memmove(void* dest, const void* src, size_t count)
//{
//	assert(dest && src);
//	void* ret = dest;
//	if (dest < src)
//	{
//		while (count--)
//		{
//			*(char*)dest = *(char*)src;
//			dest=(char*)dest+1;
//			src = (char*)src + 1;
//		}
//	}
//	else
//	{
//		while (count--)
//		{
//			*((char*)dest + count) = *((char*)src + count);
//		}
//	}
//	return ret;
//}
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 1,2,3,5,4 };
//
//	int ret = memcmp(arr1, arr2, 12);//字节数
//		printf("%d\n", ret);
//		return 0;
//}
