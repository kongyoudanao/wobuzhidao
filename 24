#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//位断——为了节省空间——为其分配实际需要比特位
//struct s
//{
//	int a : 2;//占2个比特位。4个字节是32个比特位
//	int b : 5;//类型应该是一致的。int 和char也是整形其中的一种
//	int c : 10;//上一个位置不足会开辟其他的空间。所以整个为8个字节
//	int d : 30;//比特位不能超过32
//};
//struct d
//{
//	char a : 3;
//	char b : 4;
//	char c : 5;
//	char d : 6;
//};
//int main()
//{
//	struct s a;
//	struct d b = { 0 };
//	b.a = 10;
//	b.b = 20;
//	b.c = 3;
//	b.d = 4;
//	printf("%d\n", sizeof(a));
//	printf("%d\n", sizeof(b));
//	return 0;
//}
//枚举
//enum sex
//{
//	//枚举可能取的值--是常量
//	MALE=2,//常量也是有值的——这是给常量赋值——默认是0——只能在内部赋值，在外部不能赋值
//	FEMALE,
//	SECRET
//};
//int main()
//{
//	enum sex s = MALE;//只能取枚举里面的值
//	printf("%d %d %d", MALE, FEMALE, SECRET);//0 1 2   默认的值
//	printf("%d\n", sizeof(s));//=4  因为默认的值是数字 是整形 所以等于4
//	return 0;
//}
//联合体 共用体
//union un
//{
//	//共用一个空间。字节为最大的。不能同时使用。
//	int i;
//	char c;
//};
//int main()
//{
//	union un u;
//	printf("%d\n", &u);//共用一个地址
//	printf("%d\n", &(u.c));
//	printf("%d\n", &(u.i));
//
//	return 0;
//}
//判断当前系统大小端存储
int test()
{
	int a = 1;
	return *(char*)&a;
}
//利用枚举
//int test()
//{
//	union un 
//	{
//		char c;
//		int i;
//	}u;
//	u.i = 1;
//	return u.c;
//}
//int main()
//{
//	int a = 1;
//	int ret = test();
//	if (1 == ret)
//	{
//		printf("x");
//	}
//	else
//	{
//		printf("d");
//	}
//	return 0;
//}
//union un
//{
//	int a;
//	char c[5];
//};
//int main()
//{
//	union un u;
//	printf("%d\n", sizeof(u));//=8
//	return 0;
//}
