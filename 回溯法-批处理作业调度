//解空间：排列树

//int**m:各作业所需处理的时间
//*x：当前作业调度
//*bestx：当前最优作业调度
//*f2：机器2完成处理时间
//*f1：机器1完成处理时间
//f：完成时间和
//bestf：当前最优值
//n：作业数

void Backtrack(int i)
{
	if (i > n)
	{
		for (int j = 1;j <= n;j++)//更新最优解，更新最优值
		{
			best[x] = x[j];
		}
		bestf = f;
	}
	else
	{
		for (int j = i;j <= n;j++)
		{
			f1 += M[x[j]][1];
			f2 = ((f2[i - 1] > f1) ? f2[i - 1] : f1) + M[x[j]][2];
			f += f2[j];
			if (f < bestf)
			{
				Swap(x[i], x[j]);
				Backtrack(i + 1);
				Swap(x[j], x[i]);
			}
			f1 -= M[x[j][1]];
			f -= f2[i];
		}
	}
}
