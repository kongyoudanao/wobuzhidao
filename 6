#include<stdio.h>
//《《《递归》》》
//void printf(int n)
//{
//	if (n > 9)
//	{
//		printf(n / 10);
//	}
//	printf("%d\n", n % 10);
//}
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);
//	printf(num);
//	return 0;
//}
#include<string.h>
//int my_strlen(char* str)
//{
//	int count = 0;
//	while(*str != '0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}使用递归后
//my_strlen("bit")
//1+my_strlen("it")
//int my_strlen(char* str)    没有临时变量
//{
//	if (*str != '0')
//	{
//		return 1 + my_strlen(str + 1);
//	}
//	else
//		return 0;
//}
//int main()
//{
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("len=%d", len);
//}递归与迭代
//int Fec1(int n)//利用循环的方式
//{
//	int i = 0;
//	int ret = 0;
//	for (i = 1;i <= n;i++)
//	{
//		ret*= i;
//	}
//	return ret;
//}
//int Fec1(int n)//使用递归
//{
//	if (n <= 1)
//	{
//		return 1;
//	}
//	else
//		return n * Fec1(n - 1);
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = Fec1(n);
//	printf("%d", ret);
//}斐波那契数列
//前两个数和等于第三个
//int Fib(int n)//递归运算量过大。
//{
//	if (n <= 2)
//	{
//		return 1;
//	}
//	else
//		return Fib(n - 1) + Fib(n - 2);
//}迭代
//int Fib(int n)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (n > 2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = Fib(n); 
//	printf("%d\n", ret);
//
//	return 0;
//}
