//
//解空间：子集树
//1.队列式分支限界法
//  ①.检测当前节点的左孩子节点，可行入队
//  ②.将其右儿子节点加入队列（右儿子一定可行）
//  ③.舍弃当前扩展节点
//  ④.每层节点之后都加一个尾部标记“-1”，将活结点分层
  

//只考虑最大载重量，不考虑最优解
void EnQueue(Queue& Q, Type wt, Type& bestw, int i, int n)//将活结点加入到活结点队列Q中
{
	if (i == n)//可行叶节点
	{
		if (wt > bestw)//叶子节点不入队列
		{
			bestw = wt;//wt：当前船载重量
		}
	}
	else
	{
		Q.Add(wt);//非叶子节点
	}
}

Type MaxLoading(Type w[], Type c, int n)
{
	Queue Q;//活结点队列
	Q.Add(-1);//同层节点尾部标志
	int i = 1;//当前扩展节点所在层数
	Type Ew = 0,//扩展节点所相应的载重量
		bestw=0;//当前最优载重量
	while (true)//搜索子集空间树
	{
		if (Ew + w[i] <= c)//检查左儿子节点
		{
			//相当于回溯法的  x[i]=1
			EnQueue(Q, Ew + w[i], bestw, i, n);//入队
		}
		//右孩子节点总是可行的
		//相当于回溯法的 x[i]=0
		EnQueue(Q, Ew, bestw, i, n);//入队      
		Q.Delete(Ew);//取下一扩展节点
		if (Ew == -1)//判断是否为同层节点尾部
		{
			if (Q.IsEmpty())//判断-1后队列为空不 空就返回 
			{
				return bestw;
			}
			Q.Add(-1);//同层节点尾部标志
			Q.Delete(Ew);//取下一扩展节点
			i++;//进入下一层
		}
	}
}

//2.算法的改进（右子树加入剪枝条件）
//  上面的算法右子树没有剪枝，效率较差
//  策略：设bestw为当前最优解，ew是当前结点所相应的重量，r是剩余集装箱的重量。则当ew+r<=bestw时，可将右子树剪去
//  为了确保右子树成功剪枝，算法每进一次左子树的时候更新bestw的值，不要等待i=n的时候才去更新


//检查左儿子节点
Type wt = Ew + w[i];//左儿子节点的重量
if (wt<=c)//可行节点
{
	if (wt > bestw)
	{
		bestw = wt;//提前更新bestw
	}
	if (i < n)
	{
		Q.Add(wt);//加入活结点队列
	}
}
//检查右儿子节点
if (Ew + r > bestw && i < n)
{
	Q.Add(Ew);//可能含最优解
}

//3.构造最优解
// 为算法结束后能方便的构造出与最优值相应的最优解，可在每个节点处设置指向其父节点的指针，并设置左右儿子标志

struct QNode
{
	QNode* parent;//指向父节点的指针
	bool LChild;//左儿子标志
	Type weight;//节点所相应的载重量
};
