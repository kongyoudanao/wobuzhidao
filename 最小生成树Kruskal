//用邻接矩阵构建图
typedef struct VexNode
{
	int no;
}VexNode;

typedef struct MGragh
{
	int edges[MaxSize][MaxSize];
	int v, e;
	VexNode vex[MaxSize];
}MGragh;

int edges[5][5] =
{
	max,5,1,2,max,
	5,max,3,max,4,
	1,3,max,6,2,
	2,max,6,max,3,
	max,4,2,3,max
};

typedef struct Road
{
	int a,b,w;//Road是边的意思，a，b是边的两个顶点，w是边的权值
}Road;

Road road[MaxSize];
int v[MaxSize];//并查集，找父亲的,若父亲相同就代表成环了，我们的要求不成环

int getRoot(int a)//用并查集的思想，找到根节点
{
	while (a!=v[a])//a不等于v[a]就是不是根节点，v[a]是a的父亲
	{
		a = v[a];
	}
	return a;
}

//根据权重给它排序
void sort_w(Road road[], int low, int high)
{
	int i = low, j = high;
	Road temp;
	if (low < high)
	{
		temp = road[low];
		while (i<j)
		{
			while (j > i && road[j].w > temp.w)
			{
				--j;
			}
			if (i < j)
			{
				road[i] = road[j];
				i++;
			}
			while (i<j&&road[i].w<temp.w)
			{
				i++;
			}
			if (i < j)
			{
				road[j] = road[i];
				j--;
			}
		}
		road[i] = temp;
		sort_w(road,low, i - 1);
		sort_w(road, i + 1, high);
	}
}

//正式算法
void Kruskal(MGragh g, int& sum, Road road[])//g是图的变量，sum把最小权值和传出去，road是边的数组
{
	//目的是使每个点的父亲都是自己 给每个点都断开
	for (int i = 0;i < g.v;i++)
	{
		v[i] = i;
	}
	//排序
	sort_w(road, 0, g.e - 1);

	for (int i = 0;i < g.e;i++)
	{
		int a =	getRoot(road[i].a);
		int b = getRoot(road[i].b);
		if (a != b)
		{
			v[a] = b;
			sum += road[i].w;
		}
	}
}
