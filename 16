#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

//《《《一维数组传参》》》
//void test(int arr[])
//{}
//void test(int arr[10])
//{}
//void test(int* arr)
//{}
//void test2(int* arr2[10])
//{}
//void test2(int** arr2)
//{}
//int main()
//{
//	int arr[10] = { 0 };
//	int* arr2[10] = { 0 };
//	test(arr);
//	test2(arr2);
//	return 0;
//}《《《二维数组传参》》》
//void test(int*arr)错误的
//{}
//void test(int**arr)错误的
//{}
//void test(int(*arr)[5])
//{}
//int main()
//{
//	int arr[3][5] = { 0 };
//	test(arr);
//	return 0;
//}《《《一级指针传参》》》
//void test(int*p)
//{}
//void test1(int*p)
//{}
//int main()
//{
//	int arr[10] = { 1,2,3,4 };
//	int* p = arr;
//	test(p);
//	int a = 0;
//	int* pa = &a;
//	test1(pa);
//	test1(&a);
//	return 0;
//}《《《二级指针传参》》》
//void test(int**ptr)
//{}
//int main()
//{
//	int* arr[10];
//	int n = 10;
//	int* p = &n;
//	int** pp = &p;
//	test(arr);
//	test(pp);
//	test(&p);
//	return 0;
//}《《《函数指针》》》
//int Add(int a, int b)
//{
//	return a + b;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	//Add(a, b);
//	//printf("%d\n", &Add);//  &函数名  与  函数名  都是函数的地址
//	//printf("%d\n", Add);
//	int(*p)(int, int) = Add;//存放函数地址方式的一个指针
//	printf("%d\n", (*p)(2, 3));
//	return 0;
//}
//void print(const char* str)
//{
//	printf("%s\n", str);
//}
//int main()
//{
//	void(*p)( const char*) = print;
//	(*p)("hello");
//	return 0;
//}《《《C陷阱与缺陷》》》
//(*   (void(*)()   )0   )();
//void(*)()指针类型——函数指针类型
//把0强制类型转换成——void(*)()函数指针类型————0就是一个函数的地址
//这段的意思就是调用————0地址处的该函数

//void(*signal(int, void(*)(int)))(int);
//signalo(int, void(*)(int));是一个函数
//void(*)(int);是函数指针类型
//void(*                     )(int)；是函数指针类型 


//int Add(int a, int b)
//{
//	return a + b;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	
//	int(*p)(int, int) = Add;//存放函数地址方式的一个指针
//	printf("%d\n", (p)(2, 3));         //结果相同
//	printf("%d\n", (*p)(2, 3));
// printf("%d\n", p(2, 3));
// printf("%d\n", Add(2, 3));
//
//
//	printf("%d\n", (**p)(2, 3));       //但没什么用
//	printf("%d\n", (***p)(2, 3));
//	return 0;
//}
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}int mul(int x, int y)
//{
//	return x * y;
//}int div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int(*pa)(int, int) = add;
//	int(*p[4])(int, int) = { add,sub,mul,div };//函数指针的数组——存放函数地址的数组
//
//	int  i = 0;
//	for (i = 0;i < 4;i++)
//	{
//		printf("%d\n", p[i](2, 3));
//		printf("%d\n", (*p[i])(2, 3));
//	}
//	return 0;
//}《《《计算器》》》
void menu()
{
	printf("   1.add          2.sub\n");
	printf("   3.mul          4.div\n");
	printf("          0.exit       \n");
}
int add(int x, int y)
{
	return x + y;
}
int sub(int x, int y)
{
	return x - y;
}
int mul(int x, int y)
{
	return x * y;
}
int div(int x, int y)
{
	return x / y;
}
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	do
//	{
//		menu();
//		printf("请选择\n");
//		scanf("%d", &input);
//		printf("请输入两个操作数\n");
//		scanf("%d%d", &x, &y);
//		switch (input)
//		{
//		case 1:
//			printf("%d\n", add(x, y));
//			break;
//		case 2:
//			printf("%d\n", sub(x, y));
//			break;
//		case 3:
//			printf("%d\n", mul(x, y));
//			break;
//		case 4:
//			printf("%d\n", div(x, y));
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("错误\n");
//			break;
//		}
//	} while (input);
//	return 0;
//优化后
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*p[5])(int, int) = { 0,add,sub,mul,div };
//	do
//	{
//		menu();
//		printf("请选择\n");
//		scanf("%d", &input);
//		if (input >= 1 && input <= 4)
//		{
//			printf("请输入两个操作数\n");
//			scanf("%d%d", &x, &y);
//			int ret = p[input](x, y);
//			printf("%d\n", ret);
//		}
//		else if (input == 0)
//		{
//			printf("退出\n");
//		}
//		else
//		{
//			printf("错误\n");
//		}
//	
//	
//	} while (input);
//	return 0;
//}《《《利用回调函数》》》
//void Calc(int(*p)(int x,int y))
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入两个操作数\n");
//	scanf("%d%d", &x, &y);
//	printf("%d\n", p(x, y));
//}
//int main()
//{
//	int input = 0;	
//	do
//	{
//		menu();
//		printf("请选择\n");
//		scanf("%d", &input);
//
//		switch (input)
//		{
//		case 1:
//			Calc(add);
//			break;
//		case 2:
//			Calc(sub);
//			break;
//		case 3:
//			Calc(mul);
//			break;
//		case 4:
//			Calc(div);
//			break;
//		case 0:
//			printf("退出\n");
//			break;
//		default:
//			printf("错误\n");
//			break;
//		}
//	} while (input);
//	return 0;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	int(*p)[10] = &arr;//取出数组的地址
//	
//	int (*pf)(int, int);//函数指针
//	int(*pfarr[4])(int, int);//pfarr是一个数组--函数指针的数组
//	int(*(*ppf)[4])(int, int) = &pfarr;
//	ppf是一个数组指针，指针指向的数组又四个元素。
//		指向的数组的每个元素类型是一个指针函数。
//	return 0;
//}《《《回调函数》》》
//void print(const char* str)
//{
//	printf("hehe:%s\n", str);
//}
//void test(void(*p)(const char*))
//{
//	printf("test\n");
//	p("bit");
//}
//int main()
//{
//	test(print);
//	return 0;
//}
