//用邻接矩阵创建图（无向图）
typedef struct VexNode
{
	int no;

}VexNode;

typedef struct MGragh
{
	int edges[maxsize][maxsize];//边的权值
	int v, e;//v是总顶点数
	VexNode vex[MaxSize];
}MGragh;

int edges[5][5] =
{
	max,5,1,2,max,
	5,max,3,max,4,
	1,3,max,6,2,
	2,max,6,max,3,
	max,4,2,3,max
};

//算法   基本就是同Dijkstra
void Prim(MGragh g, int v, int& sum)//g是图的变量，v是哪一个顶点，sum是最小生成树边之和
{
	int set[MaxSize],//是纳入的顶点 
		lowcost[MaxSize],//纳入的顶点与没纳入最小权值
		u;

	for (int i = 0;i < g.v;i++)
	{
		lowcost[i] = g.edges[v][i];
		set[i] = 0;
	}
	set[v] = 1;

	for (int i = 0;i < g.v-1;i++)
	{
		int min = MaxSzie;
		for (int j = 0;j < g.v;j++)
		{
			if ((!set[j]) && (lowcost[j] < min))
			{
				min = lowcost[j];
				u = j;
			}
		}
		set[u] = 1;
		sum += min;
		for (int j = 0;j < g.v-;j++)
		{
			if ((!set[j]) && lowcost[j] > g.edges[u][j])
			{
				lowcost[j] = g.edges[u][j];
			}
		}
	}
}



//书上的
//c是一个二维数组存放边的权
void Prim(int n, Type** c)
{
	Type lowcost[maxint];
	int closest[maxint];
	bool s[maxint];
	s[1] = true;
	for (int i = 2;i <= n;i++)
	{
		lowcost[i] = c[1][i];
		closest[i] = 1;
		s[i] = false;
	}


	for (int i = 1;i < n;i++)
	{
		Type min = inf;
		int j = 1;
		for (int k = 2;k <= n;k++)
		{
			if ((lowcost[k] < min) && (!s[k]))
			{
				min = lowcost[k];
				j = k;
			}
			cout << j << ' ' << closest[j] << endl;
			s[j] = true;
			for (int k = 2;k <= n;k++)
			{
				if ((c[j][k] < lowcost[k]) && (!s[k]))
				{
					lowcost[k] = c[j][k];
					closest[j];
				}
			}
		}
	}
}
