#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
//《《《冒泡排序》》》
int maopao(int arr[], int sz)
{
	int i = 0;
	for (i = 0;i < sz - 1;i++)//排了多少躺
	{
		//一趟排序
		int j = 0;
		for (j = 0;j < sz - 1 - i;j++)//排了多少对
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}
struct stu
{
	char name[20];
	int age;
};
////void qsort(void* base,
//	size_t num,
//	size_t width,
//	int(*cmp)(const void* e1, const void* e2));
//void* 可以接受任意类型的地址 
//但不能解引用 例如*p  
//也不能加减整数的操作。
int cmp(const void*e1,const void*e2)
{
	return *(int*)e1 - *(int*)e2;
}
void test1()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp);//qsort是一个库函数    用到stdlib.h
}
int cmp_float(const void* e1, const void* e2)
{
	if (*(float*)e1 < *(float*)e2)
		return 1;
	else
		return 0;
}
void test2()
{
	float f[] = { 9.0,8.0,7.0,6.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
}
int cmp_s_age(const void* e1, const void* e2)
{
	return ((stu*)e1)->age - ((stu*)e2)->age;
}
#include<string.h>
int cmp_s_name(const void* e1, const void* e2)
{
	return strcmp(((stu*)e1)->name, ((stu*)e2)->name);
}
void test3()
{
	stu s[3] = { {"zs",20},{"ls",25},{"ww",30} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_s_age);
	//第一个参数：要排序数组的首元素地址
	//第二个参数：待排序数组的元素个数
	//第三个参数：待排序数组的每个元素大小
	//第四个参数：是指针函数  比较两个元素所用函数的地址--这个函数使用者自己实现
	//                        函数指针的两个参数是：待比较的两个元素的地址
}
int main()
{
	//maopao(arr, sz);
	return 0;
}
