#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>

//int main()
//{
//	//int a[] = { 1,2,3,4 };
//	////1.sizeof（数组名）-数组名表示整个数组。
//	////2.&数组名-数组名表示整个数组。
//	//printf("%d\n", sizeof(a));//4*4=16——计算数组总大小，单位是字节
//	//printf("%d\n", sizeof(a+0));//4/8——首元素地址大小
//	//printf("%d\n", sizeof(*a));//4/8——首元素大小
//	//printf("%d\n", sizeof(a+1));//4/8——第二个元素地址大小
//	//printf("%d\n", sizeof(a[1]));//4/8——第二个元素的大小
//	//printf("%d\n", sizeof(&a));//&a取出数组的地址，但是数组的地址那也是地址，是地址大小就是4/8字节
//	//printf("%d\n", sizeof(*&a));//16——&a数组的地址，数组的地址解引用访问的数组，计算就是数组的大小
//	//printf("%d\n", sizeof(&a+1));//4/8——&a数组的地址，&a+1是&a下一个的地址，所以还是地址
//	//printf("%d\n", sizeof(&a[0]));//4/8——是一个元素的地址
//	//printf("%d\n", sizeof(&a[0]+1 ));//4/8——是第二个元素的地址
//	
//	
//	//char a[] = { 'a','b','c','d','e','f' };
//	//printf("%d\n", sizeof(a));//6*1=6——数组大小
//	//printf("%d\n", sizeof(a+0));//4/8——首元素的地址
//	//printf("%d\n", sizeof(*a));//1——首元素大小
//	//printf("%d\n", sizeof(a[1]));//1——第二个元素大小
//	//printf("%d\n", sizeof(&a));//4/8——数组的地址
//	//printf("%d\n", sizeof(&a+1));//4/8——数组下一个的地址，还是地址
//	//printf("%d\n", sizeof(&a[0]+1));//4/8——第二个元素的地址
//
//	//printf("%d\n", strlen(a));//随机值——不知道后面'\0'在哪
//	//printf("%d\n", strlen(a+0));//随机值——等于上面的写法
//	//printf("%d\n", strlen(*a));//错误的写法——等于把字符a当作地址传过去了
//	//printf("%d\n", strlen(a[1]));//错误的写法——同上
//	//printf("%d\n", strlen(&a));//随机值与上面2个随机值相同
//	//printf("%d\n", strlen(&a+1));//随机值但是与上面随机值-6
//	//printf("%d\n", strlen(&a[0]+1));//随机值与上面-1
//
//
//	//char arr[] = "abcdef";
//
//	//printf("%d", sizeof(arr));//7*1=7——计算的是数组的大小 abcdef还有\0
//	//printf("%d", sizeof(arr+0));//4/8——首元素地址的大小
//	//printf("%d", sizeof(*arr));//1——首元素大小
//	//printf("%d", sizeof(arr[1]));//1——第二个元素大小
//	//printf("%d", sizeof(&arr));//4/8——计算的数组的地址大小
//	//printf("%d", sizeof(&arr+1));//4/8——跳过数组的地址
//	//printf("%d", sizeof(&arr[0]+1));//4/8——第二个元素的地址
//
//
//	//printf("%d\n", strlen(arr));//6——到字符0为止不包括字符0
//	//printf("%d\n", strlen(arr+0));//6——与上面写法一样
//	//printf("%d\n", strlen(*arr));//错误写法——strlen接受的是地址，不能传元素
//	//printf("%d\n", strlen(arr[1]));//也是错误的
//	//printf("%d\n", strlen(&arr));//6————strlen（const char*数组名  ）
//	//printf("%d\n", strlen(&arr+1));//随机值
//	//printf("%d\n", strlen(&arr[0]+1));//5
//
//
//
//	//const char* p = "abcdef";
//
//	//printf("%d\n", sizeof(p));//4/8——计算指针变量p的大小
//	//printf("%d\n", sizeof(p+1));//4/8——字符b的地址
//	//printf("%d\n", sizeof(*p));//1——字符串第一个字符大小
//	//printf("%d\n", sizeof(p[0]));//1——p[0]=*(p+0)
//	//printf("%d\n", sizeof(&p));//4/8
//	//printf("%d\n", sizeof(&p+1));//4/8
//	//printf("%d\n", sizeof(&p[0]+1));//4/8——b的地址
//	 
//	
//	//printf("%d\n", strlen(p));//6——
//	//printf("%d\n", strlen(p+1));//5——p+1=a  从b到f 包括f
//	//printf("%d\n", strlen(*p));//错误写法
//	//printf("%d\n", strlen(p[0]));//错误写法
//	//printf("%d\n", strlen(&p));//随机值
//	//printf("%d\n", strlen(&p+1));//随机值
//	//printf("%d\n", strlen(&p[0]+1));//5
//
//
//
//	//int a[3][4] = { 0 };
//	//printf("%d\n", sizeof(a));//3*4*4=48
//	//printf("%d\n", sizeof(a[0][0]));//4——第一个整形元素大小
//	//printf("%d\n", sizeof(a[0]));//4*4=16——第一行数组大小——a[0]相当于第一行的数组名
//	//printf("%d\n", sizeof(a[0]+1));//4——第一行的第二个元素的地址——a[0]是第一行的数组名，
//	//                               //数组名此时是首元素的地址a[0]是第一行的首元素地址
//	//printf("%d\n", sizeof(*(a[0]+1)));//4——第一行第二个元素大小
//	//printf("%d\n", sizeof(a+1));//4——第二行地址——a是首元素地址——把二维数组看成一维数组——二维数组的首元素就是第一行
//	//printf("%d\n", sizeof(*(a+1)));//16——第二行大小
//	//printf("%d\n", sizeof(&a[0]+1));//4——第二行的地址
//	//printf("%d\n", sizeof(*(&a[0]+1)));//16——第二行的大小
//	//printf("%d\n", sizeof(*a));//16——是第一行大小
//	//printf("%d\n", sizeof(a[3]));//16
//
//
//
//	return 0;
//}
//int main()
//{
//	int a[5] = { 1,2,3,4,5 };
//	int* p = (int*)(&a + 1);//取a的地址+1——a后面的地址
//	printf("%d,%d\n", *(a + 1), *(p - 1));// 2   5
//}
//struct test
//{
//	int num;
//	char* pc;
//	short s;
//	char c[2];
//	short b[4];
//}*p;
////假设p的值为0x100000
////已知test类型变量大小是20字节
//int main()
//{
//	printf("%p\n", p + 0x1);//跳过test——p等于加上20的16进制
//	printf("%p\n", (unsigned long)p + 0x1);转为整形——等与加上1的十六进制
//	printf("%p\n", (unsigned int*)p + 0x1);跳过int型——加上4的十六进制
//	return 0;
//}
//int main()
//{
//	int a[4] = { 1,2,3,4 };
//	int* p1 = (int*)(&a + 1);
//	int* p2 = (int*)((int)a + 1);
//	printf("%x,%x", p1[-1], *p2);
//
//	return 0;
//}
//int main()
//{
//	int a[3][2] = { (0,1),(2,3),(4,5) };//逗号表达式
//	int* p;
//	p = a[0];
//	printf("%d\n", p[0]);//=1
//	return 0;
//}
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d", &p[4][2] - &a[4][2], &p[4][2] - &a[4[2]]);
//	return 0;
//}
