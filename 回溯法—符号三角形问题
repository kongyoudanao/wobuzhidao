//解向量：用n元组x[1:n]表示符号三角形的第一行
//可行性约束：当前符号三角形所包括的“+”的个数与“-”的个数均不超过  (n*(n+1))/4=half
//无解的判断：(n*(n+1))/2=奇数

//例子：   
//  + - + +    把他变成数组就是  +-++
//   - - +                       --+
//    + -                        +- 
//     -                         - 

void Backtrack(int t)
{
	if ((count > half)||(t*(t-1)/2-count>half))//count是减号的个数  half是加号减号均不超过的一半
	{
		return;
	}
	if (t > n)
	{
		sum++;//是我们给定一个n的值有少个加减号相等的方案
	}
	else
	{
		for (int i = 0;i < 2;i++)//赋值零和一
		{
			p[1][t] = i;//p是存放加减号的数组  0是加号   1是减号
			count += i;//减号个数
			for (int j = 2;j <= t;j++)
			{
				p[j][t - j + 1] = p[j - 1][t - j + 1] ^ p[j - 1][t - j + 2];//他的上面和右上
				count += p[j][t - j + 1];
			}
			Backtrack(t + 1);//也可以把第一句的判断用来判断Backtrack是否执行
			for (int j = 2;j <= t;j++)
			{
				count -= p[j][t - j + 1];
			}
			count -= i;
		}
	}
}
