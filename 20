#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//int main()
//{
//	int a[5] = { 5,4,3,2,1 };
//	int* p = (int*)(&a + 1);
//	printf("%d,%d", *(a + 1), *(p - 1));
//	return 0;
//}
//int main()
//{
//	int a[2][5] = { 0,1,2,3,4,5,6,7,8,9 };
//	int* p1 = (int*)(&a + 1);
//	int* p2 = (int*)(*(a + 1));
//	printf("%d,%d", *(p1 - 1), *(p2 - 1));
//	return 0;
//}
//左旋字符串中的k个字符
//abcd左旋一个字符得bcda
//abcd左旋两个字符得cdab
#include<string.h>
#include<assert.h>
//暴力求解
//void left(char*a, int k)
//{
//	assert(a);
//	int i = 0;
//	int len = strlen(a);
//	for (i = 0;i < k;i++)
//	{
//		char tmp = *a;
//		int j = 0;
//		for (j = 0;j < len - 1;j++)
//		{
//			*(a + j) = *(a + j + 1);
//		}
//		*(a + len - 1) = tmp;
//	}
//}
//三部反转发
//abcdef
//bafedc
//cdefba
//void left(char* a, int k)
//{
//	int len = strlen(a);
//	assert(a);
//	assert(k <= len);
//	reverse(a,a+k-1);//逆序左边
//	reverse(a+k,a+len-1);//逆序右边
//	reverse(a,a+len-1);//逆序整体
//}
////逆序字符串函数
//void reverse(char*left,char*right)
//{
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left<right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	char a[] = "bcdefg";
//	left(a, 2);
//	printf("%s\n", a);
//	return 0;
//} 
//判断一个字符串是否为另一个字符串的逆序
//void reverse(char* left, char* right)
//{
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//void left(char* a, int k)
//{
//	int len = strlen(a);
//	assert(a);
//	assert(k <= len);
//	reverse(a, a + k - 1);//逆序左边
//	reverse(a + k, a + len - 1);//逆序右边
//	reverse(a, a + len - 1);//逆序整体
//}
//int is_left(char*a1,char*a2)
//{
//	int len = strlen(a1);
//	int i = 0;
//	for (i = 0;i < len;i++)
//	{
//		left(a1, 1);
//		int ret = strcmp(a1, a2);
//		if (ret == 0)
//			return 1;
//	}
//	return 0;
//}
//int main()
//{
//	char a1[] = "abcdef";
//	char a2[] = "cdefab";
//	int ret = is_left(a1, a2);
//	if (ret == 1)
//		printf("yes\n");
//	else
//		printf("no\n");
//	return 0;
//}
//int is_left(char* a1, char* a2)
//{
//	int len1= strlen(a1);
//	int len2 = strlen(a2);
//	if (len1 != len2)
//		return 0;
//	strncat(a1, a1,len1);
//	char*ret=strstr(a1, a2);
//	if (ret == NULL)
//		return 0;
//	else
//		return 1;
//}
//int main()
//{
//	char a1[30] = "abcdef";
//	char a2[] = "cdefab";
//	int ret = is_left(a1, a2);
//	if (ret == 1)
//		printf("yes\n");
//	else
//		printf("no\n");
//	return 0;
//}
//杨氏矩阵
//矩阵从左到右递增  从上倒下也是递增
//1 2 3
//2 3 4
//4 5 6
int findnum(int a[3][3], int k, int row, int col)
{
	int x = 0;
	int y = col - 1;
	while (x<=row-1&&y>=0)
	{
		if (a[x][y] > k)
		{
			y--;
		}
		else if(a[x][y]<k)
		{
			x++;
		}
		else
		{
			return 1;
		}
	}
	return 0;
}
int main()
{
	int a[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 7;
	int ret = findnum(a, k, 3, 3);
	if (ret == 1)
	{
		printf("找到了\n");
	}
	else
	{
		printf("找不到\n");
	}
	return 0;
}
