//动态规划递归式


//不是书的
//m[i][j] = { 0   i = 0 / j = 0 };
//          {m[i - 1][j], w[i] > j};
//          {Max{ m[i - 1][j],m[i - 1][j - w[i]] + v[i] }, w[i] <= j};


//书中的
void Knapsack(Type v, int w, int c, int n, Type** m)
{
    int jMax = min(w[n] - 1, c);
    for (int j = 0;j <= jMax;j++)
    {
        m[n][j] = 0;
    }
    for (int j = w[n];j <= c;j++)
    {
        m[n][j] = v[n];
    }
    for (int i = n - 1;i > 1;i--)
    {
        jMxa = min(w[i] - 1, c);
        for (int j = 0;j <= jMax;j++)
        {
            m[i][j] = m[i + 1][j];
        }
        for (int j = w[i];j <= c;j++)
        {
            m[i][j] = max = (m[i + 1][j], m[i + 1][j - w[i]] + v[i]);
        }
    }
    m[1][c] = m[2][c];
    if (c >= w[1])
    {
        m[1][c] = max(m[1][c], m[2][c - w[1]] + v[1]);
    }
}
void Traceback(Type** m, int w, int c, int n, int x)
{
    for (int i = 1;i < n;i++)
    {
        if (m[i][c] == m[i + 1][c])
        {
            x[i] = 0;
        }
        else
        {
            x[i] = 1;
            c -= w[i];
        }
    }
    x[n] = (m[n][c]) ? 1 : 0;
}
//不是书上的
int pack(int n, int c, int v[], int w[], int sum[][MAXSIZE])
{
    for (int i = 1;i <= n;i++)
    {
        sum[i][0] = 0;;
    }
    for (int i = 0;i <= c;i++)
    {
        sum[0][i] = 0;
    }

    for (int i = 1;i <= n;i++)
    {
        for (int j = 1;j <= c;j++)
        {
            if (w[i - 1] > j)
            {
                sum[i][j] = sum[i - 1][j];
            }
            else
            {
                sum[i][j] = max(sum[i - 1][j], sum[i - 1][j - w[i - 1]] + v[i - 1]);
            }
        }
    }
    return 0;
}
void TraceBack(int n, int c, int w[], int sum[][MAXSIZE], int x[])
{
    for (int i = n;i > 0;i--)
    {
        if (sum[i][c] == sum[i - 1][c])
        {
            x[i] = 0;
        }
        else
        {
            x[i] = 1;
            c -= w[i];
        }
    }
}
