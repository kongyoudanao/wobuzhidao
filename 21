#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>

//char* my_strcpy(char* a1, const char* a2)
//{
//	assert(a1 && a2);
//	char* ret = a1;
//	while (*a1++=*a2++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char a1[] = "abcdef";
//	char a2[] = "bit";
//	my_strcpy(a1, a2);
//	printf("%s\n", a1);
//	return 0;
//}
//char* my_strcat(char* a1, const char* a2)
//{
//	char* ret = a1;
//	assert(a1 && a2);
//	while (*a1!='\0')
//	{
//		a1++;
//	}
//	while (*a1++=*a2++)
//	{
//		;
//	}
//	return  ret;
//}
//int main()
//{
//	char a1[30] = "hello";
//	char a2[] = "worle";
//	my_strcat(a1, a2);
//	printf("%s\n", a1);
//	return 0;
//}
#include<string.h>
//int main()
//{
//	const char* p1 = "abcdef";
//	const char* p2 = "ffeg";
//	int ret = strcmp(p1, p2);
//	printf("%d\n", ret);
//	return 0;
//}
//strcmp   p1>p2  返回大于零的数
//         p1=p2  返回0
//         p1<p2  返回小于零的数
//int my_strcmp(const char* p1, const char* p2)
//{
//	assert(p1 && p2);
//	while (*p1==*p2)
//	{
//		if (*p1 == '\0')
//		{
//			return 0;
//		}
//	}
//	if (*p1 > *p2)
//	{
//		return 1;
//	}
//	else
//	{
//		return -1;
//	}
//}
//int main()
//{
//	const char* p1 = "abcdef";
//	const char* p2 = "aasfvr";
//	int ret = my_strcmp(p1, p2);
//	printf("%d\n", ret);
//	return 0;
//}
//int main()
//{
//	char a1[5] = "adc";
//	char a2[] = "hellow";
//	strncpy(a1, a2, 4);
//	//拷贝num个字节从源字符串到目标空间
//	//如果源字符串的长度小于num，拷贝完之后在后面补0，直到num个
//	return 0;
//}
//int main()
//{
//	char a1[30] = "hello";
//	char a2[] = "world";
//	strncat(a1, a2, 4);
//	//加入后会自动补加0
//	return 0;
//}
